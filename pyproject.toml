[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs==0.5",
  "hatchling==1.27",
]

[project]
name = "meltano-state-backend-rocksdb"
description = "Meltano State Backend for RocksDB"
readme = "README.md"
keywords = [
  "backend",
  "meltano",
  "rocksdb",
  "rocksdict",
  "state",
]
license = "MIT"
license-files = [ "LICENSE" ]
maintainers = [
  { name = "Edgar Ramírez Mondragón", email = "edgarrm358@gmail.com" },
]
authors = [
  { name = "Edgar Ramírez Mondragón", email = "edgarrm358@gmail.com" },
]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Typing :: Typed",
]
dynamic = [
  "version",
]
dependencies = [
  "meltano>=3.7",
  "rocksdict~=0.3",
]
entry-points."meltano.settings".write_buffer_size = "meltano_state_backend_rocksdb.rocksdb:WRITE_BUFFER_SIZE"
entry-points."meltano.state_backends".rocksdb = "meltano_state_backend_rocksdb.rocksdb:RocksDBStateStoreManager"

[dependency-groups]
dev = [
  { include-group = "testing" },
  { include-group = "typing" },
]
testing = [
  "coverage[toml]>=7.6.10",
  "pytest>=8",
]
typing = [
  "mypy>=1",
  "ty>=0.0.1a20",
]

[tool.hatch.version]
source = "vcs"

[tool.ruff]
line-length = 88
preview = true

lint.select = [
  "A",    # flake8-builtins
  "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  "B",    # flake8-bugbear
  "BLE",  # flake8-blind-except
  "C4",   # flake8-comprehensions
  "C90",  # mccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DOC",  # pydoclint
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle (error)
  "EM",   # flake8-errmsg
  "ERA",  # flake8-eradicate
  "F",    # pyflakes
  "FA",   # flake8-future-annotations
  "FIX",  # flake8-fixme
  "FLY",  # flynt
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "INP",  # flake8-no-pep420
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # Perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PLC",  # Pylint (Convention)
  "PLE",  # Pylint (Error)
  "PLR",  # Pylint (Refactor)
  "PLW",  # Pylint (Warning)
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "S",    # flake8-bandit
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TC",   # flake8-type-checking
  "TD",   # flake8-todos
  "TID",  # flake8-tidy-imports
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle (warning)
  "YTT",  # flake8-2020
]
lint.ignore = [
  "S310",  # Allow `urllib.open`
  "S603",  # Allow `subprocess.run(..., shell=False)`
  "UP026", # Replace `mock` import with `unittest.mock` - remove once Python 3.7 support is dropped
]

lint.per-file-ignores."tests/**" = [
  "D",    # Don't lint docstrings in tests
  "S101", # Allow 'assert' in tests
]
lint.flake8-annotations.allow-star-arg-any = true
lint.flake8-annotations.mypy-init-return = true
lint.flake8-annotations.suppress-dummy-args = true
lint.flake8-pytest-style.parametrize-values-type = "tuple"
lint.isort.known-first-party = [
  "meltano_state_backend_rocksdb",
]
lint.isort.required-imports = [
  "from __future__ import annotations",
]
lint.pydocstyle.convention = "google"

[tool.pyproject-fmt]
max_supported_python = "3.13"

[tool.pytest.ini_options]
addopts = [
  "--durations=10",
]

[tool.coverage.paths]
package = [
  "src/meltano_state_backend_rocksdb/",
  "*/site-packages/meltano_state_backend_rocksdb/",
]

[tool.coverage.run]
branch = true
source = [
  "meltano_state_backend_rocksdb",
  "tests",
]
parallel = true
relative_files = true

[tool.coverage.report]
exclude_also = [
  '''if (t\.)?TYPE_CHECKING:''',
]

[tool.tox]
min_version = "4.22"
requires = [ "tox", "tox-uv" ]
env_list = [
  "typing",
  "3.13",
  "3.12",
  "3.11",
  "3.10",
  "coverage",
]

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"
dependency_groups = [ "testing" ]
commands = [ [ "coverage", "run", "-m", "pytest", { replace = "posargs", default = [ "tests" ], extend = true } ] ]

[tool.tox.env.coverage]
depends = [
  "3.10",
  "3.11",
  "3.12",
  "3.13",
]
dependency_groups = [ "testing" ]
commands = [
  [ "coverage", "combine", "--debug=pathmap" ],
  [ "coverage", "report", "--show-missing" ],
  [ "coverage", "xml" ],
]

[tool.tox.env.typing]
dependency_groups = [ "testing", "typing" ]
commands = [
  [
    "mypy",
    "--strict",
    { replace = "posargs", default = [
      "src/meltano_state_backend_rocksdb",
      "tests",
    ], extend = true },
  ],
  [
    "ty",
    "check",
    { replace = "posargs", default = [
      "src/meltano_state_backend_rocksdb",
      "tests",
    ], extend = true },
  ],
]

[tool.mypy]
enable_error_code = [ "ignore-without-code", "redundant-expr", "truthy-bool" ]
strict = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
follow_untyped_imports = true
module = [
  "meltano.*",
]

[tool.uv]
prerelease = "allow"
preview = true
required-version = ">=0.5.19"

[tool.uv.sources]
meltano = { git = "https://github.com/meltano/meltano.git" }
