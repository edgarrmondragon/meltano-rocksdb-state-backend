[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs",
  "hatchling",
]

[project]
name = "meltano-rocksdb-state-backend"
description = "Meltano RocksDB State Backend"
readme = "README.md"
keywords = [
  "backend",
  "meltano",
  "rocksdb",
  "rocksdict",
  "state",
]
license = "MIT"
maintainers = [
  { name = "Edgar Ramírez Mondragón", email = "edgarrm358@gmail.com" },
]
authors = [
  { name = "Edgar Ramírez Mondragón", email = "edgarrm358@gmail.com" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Typing :: Typed",
]
dynamic = [
  "version",
]
dependencies = [
  # TODO: Refer to a PyPI release once this branch is merged and released
  "meltano @ git+https://github.com/meltano/meltano@state-backend-plugins",
  "rocksdict>=0.3",
]
optional-dependencies.dev = [
  "meltano-rocksdb-state-backend[testing,typing]",
]
optional-dependencies.testing = [
  "pytest",
]
optional-dependencies.typing = [
  "mypy>=1",
]
entry-points."meltano.settings".write_buffer_size = "meltano_rocksdb_state_backend.rocksdb:WRITE_BUFFER_SIZE"
entry-points."meltano.state_backends".rocksdb = "meltano_rocksdb_state_backend.rocksdb:RocksDBStateStoreManager"

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]",
]
features = [
  "testing",
]
[tool.hatch.envs.default.overrides]
env.GITHUB_ACTIONS.dev-mode = { value = false, if = [
  "true",
] }
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
cov = "coverage run -m pytest {args:tests}"

[[tool.hatch.envs.all.matrix]]
python = [
  "3.8",
  "3.9",
  "3.10",
  "3.11",
  "3.12",
]

[tool.hatch.envs.coverage]
dependencies = [
  "coverage[toml]",
]
detached = true

[tool.hatch.envs.coverage.scripts]
json = "coverage json"
xml = "coverage xml"
report = [
  "coverage combine --debug=pathmap",
  "coverage report --show-missing",
]

[tool.hatch.envs.typing]
features = [
  "testing",
  "typing",
]
template = "typing"

[tool.hatch.envs.typing.scripts]
check = "mypy --strict --install-types --non-interactive {args:src/meltano_rocksdb_state_backend tests}"

[tool.ruff]
line-length = 88

lint.select = [
  "ARG", # flake8-unused-arguments
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "COM", # flake8-commas
  "E",   # pycodestyle (error)
  "F",   # pyflakes
  "I",   # isort
  "ISC", # flake8-implicit-str-concat
  "PT",  # flake8-pytest-style
  "RSE", # flake8-raise
  "S",   # flake8-bandit
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  "UP",  # pyupgrade
  "W",   # pycodestyle (warning)
]
lint.per-file-ignores."tests/**" = [
  "S101", # Allow 'assert' in tests
]
lint.flake8-annotations.allow-star-arg-any = true
lint.flake8-annotations.mypy-init-return = true
lint.flake8-annotations.suppress-dummy-args = true
lint.flake8-pytest-style.parametrize-values-type = "tuple"
lint.isort.known-first-party = [
  "meltano_rocksdb_state_backend",
]
lint.isort.required-imports = [
  "from __future__ import annotations",
]
lint.pydocstyle.convention = "google"
lint.ignore = [
  "ANN101", # Missing type annotation for `self` in method
  "ANN102", # Missing type annotation for `cls` in class method
  "PT004",  # Add leading underscore to fixtures that do not return anything
  "S310",   # Allow `urllib.open`
  "S603",   # Allow `subprocess.run(..., shell=False)`
  "UP026",  # Replace `mock` import with `unittest.mock` - remove once Python 3.7 support is dropped
]

[tool.coverage.paths]
package = [
  "src/meltano_rocksdb_state_backend/",
  "*/site-packages/meltano_rocksdb_state_backend/",
]

[tool.coverage.run]
branch = true
source = [
  "meltano_rocksdb_state_backend",
  "tests",
]
parallel = true
relative_files = true

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if t.TYPE_CHECKING:",
]

[tool.mypy]
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "meltano.*",
]
